# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

project(two)

include(libclang.cmake)

# Target: json11
set(json11_SOURCES
	"3rdparty/json11/json11.cpp"
	cmake.toml
)

add_library(json11 STATIC)

target_sources(json11 PRIVATE ${json11_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${json11_SOURCES})

target_include_directories(json11 PUBLIC
	"3rdparty/json11"
)

# Target: stl
set(stl_SOURCES
	"src/stl/string.cpp"
	"src/stl/ubuffer.cpp"
	"src/stl/buffer.hpp"
	"src/stl/hash_base.hpp"
	"src/stl/string.hpp"
	"src/stl/ubuffer.hpp"
	"src/stl/unordered_map.hpp"
	"src/stl/unordered_set.hpp"
	"src/stl/vector.hpp"
	"src/stl/algorithm.h"
	"src/stl/allocator.h"
	"src/stl/array.h"
	"src/stl/base.h"
	"src/stl/bitset.h"
	"src/stl/buffer.h"
	"src/stl/decls.h"
	"src/stl/function.h"
	"src/stl/hash.h"
	"src/stl/hash_base.h"
	"src/stl/initializer_list.h"
	"src/stl/limits.h"
	"src/stl/map.h"
	"src/stl/math.h"
	"src/stl/memory.h"
	"src/stl/move.h"
	"src/stl/move_tiny.h"
	"src/stl/new.h"
	"src/stl/set.h"
	"src/stl/span.h"
	"src/stl/stddef.h"
	"src/stl/string.h"
	"src/stl/string_view.h"
	"src/stl/swap.h"
	"src/stl/table.h"
	"src/stl/traits.h"
	"src/stl/tuple.h"
	"src/stl/type_traits.h"
	"src/stl/ubuffer.h"
	"src/stl/unordered_map.h"
	"src/stl/unordered_set.h"
	"src/stl/vector.h"
	cmake.toml
)

add_library(stl STATIC)

target_sources(stl PRIVATE ${stl_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${stl_SOURCES})

target_compile_definitions(stl PUBLIC
	USE_STL
	TWO_STATIC
)

target_compile_features(stl PUBLIC
	cxx_std_20
)

target_include_directories(stl PUBLIC
	src
)

# Target: infra
set(infra_SOURCES
	"src/infra/Arena.cpp"
	"src/infra/File.cpp"
	"src/infra/Log.cpp"
	"src/infra/StringOps.cpp"
	"src/infra/Thread.cpp"
	"src/infra/ToString.cpp"
	"src/infra/ToValue.cpp"
	"src/infra/infra.extern.cpp"
	"src/infra/infra.types.cpp"
	"src/infra/AlignedAlloc.h"
	"src/infra/Api.h"
	"src/infra/Arena.h"
	"src/infra/Config.h"
	"src/infra/Copy.h"
	"src/infra/Cpp20.h"
	"src/infra/File.h"
	"src/infra/Forward.h"
	"src/infra/Generic.h"
	"src/infra/Global.h"
	"src/infra/Limits.h"
	"src/infra/Log.h"
	"src/infra/NonCopy.h"
	"src/infra/Pragma.h"
	"src/infra/Reverse.h"
	"src/infra/Sort.h"
	"src/infra/StringConvert.h"
	"src/infra/StringOps.h"
	"src/infra/Swap.h"
	"src/infra/Thread.h"
	"src/infra/ToString.h"
	"src/infra/ToValue.h"
	"src/infra/TypeTraits.h"
	"src/infra/Types.h"
	"src/infra/Vector.h"
	"src/infra/VectorTraits.h"
	cmake.toml
)

add_library(infra STATIC)

target_sources(infra PRIVATE ${infra_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${infra_SOURCES})

target_link_libraries(infra PUBLIC
	stl
)

# Target: clrefl
set(clrefl_SOURCES
	"src/clrefl/Generator.cpp"
	"src/clrefl/clrefl.types.cpp"
	"src/clrefl/Api.h"
	"src/clrefl/Codegen.h"
	"src/clrefl/Forward.h"
	"src/clrefl/Generator.h"
	"src/clrefl/Types.h"
	cmake.toml
)

add_executable(clrefl)

target_sources(clrefl PRIVATE ${clrefl_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${clrefl_SOURCES})

target_link_libraries(clrefl PRIVATE
	stl
	libclang
	json11
	infra
)

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT clrefl)
endif()

